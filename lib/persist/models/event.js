/**
 * This is an event generated on the hub. 
 *
 * It's here for the API, as persistence is managed by graphite
 */
var Base = require('./base');

/**
 * Constructor
 *
 * @param instance {Object} The raw JS object to instantiate this from
 */
var event = module.exports = function(instance) {
  var t = this;
  if (!t instanceof event) { return new event(instance); }
  event.super_.call(t, 'event', instance);
}
require('util').inherits(event, Base);
var proto = event.prototype;

var MODEL = {
  id: "",
  type: "event",
  name: "",          // The event name in origin_name format (ifttt EventName) (first graphite tag "temp_warn")
  title: "",         // The string message (graphite title)
  source: "",        // Source of the event
  altNames: [],      // Alternate names for this event (polymorphic) (graphite tags)
  when: "",          // Time the event happened (null=now) (graphite when)
  data: {},          // Additional event data (ifttt ValueN possibilities) (graphite JSON stringified description)
}

event.apiDoc = {
  description: "An event generated by the hub",
  properties:{
    id: { type: 'string', description: 'The public event identifier', readOnly: true },
    type: { type: 'string', description: 'The resource type', readOnly: true },
    name: { type: 'string', description: 'The origin namespaced event name in origin_name format. Turns into graphite tag "temp_warn"' },
    altNames: { type: 'array', description: 'Alternate names for this event (polymorphic)', items: {type: 'string'}},
    title: { type: 'string', description: 'The human message. Turns into graphite title' },
    source: { type: 'string', description: 'Source of the event. User or device name that sourced the event' },
    when: { type: 'string', description: 'Event timestamp in ISO-8601 format. Default=now' },
    data: { type: 'object', description: 'Additional event data, stringified into graphite event description', additionalProperties: true},
  },
  required: ['name','title'],
  additionalProperties: false,
}

// Expose statics to base
Base.models.event = MODEL;
Base.classes.event = event;
['load','loadIndexed','loadByHref','delete','all'].forEach(function(methodName) {
  event[methodName] = function() {return Base[methodName](MODEL.type, arguments);}
})
